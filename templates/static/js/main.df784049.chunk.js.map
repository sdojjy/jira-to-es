{"version":3,"sources":["serviceWorker.ts","types/search.ts","api/config.ts","api/index.ts","actions/search.ts","components/IssueCard/index.tsx","components/IssuesList/index.tsx","components/MenuBar/index.tsx","components/SearchInput/index.tsx","components/Container/index.tsx","reducers/search.ts","reducers/index.ts","store.ts","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","SearchActionTypes","config","ROOT_URL","getJiraIssues","keyword","from","size","axios","get","startSearching","type","START_SEARCHING","finishSearching","FINISH_SEARCHING","setSearchKeyword","SET_SEARCH_KEYWORD","searchKeyword","setSearchStart","start","SET_SEARCH_START","searchStart","resetSearchResult","RESET_SEARCH_RESULT","getSearchJiraIssuesResult","result","GET_SEARCH_RESULT","setSearchMessage","message","SET_SEARCH_MESSAGE","searchMessage","EM_REGEX","EM_REGEX1","EM_REGEX2","useStyles","makeStyles","theme","createStyles","card","position","height","keywords","paddingTop","spacing","highlight","margin","matchLines","color","Red","link","textDecoration","IssueCard","props","classes","issue","Card","className","CardContent","Typography","variant","title","map","item","filter","i","replace","flat","v","a","indexOf","join","length","h","key","dangerouslySetInnerHTML","__html","CardActions","Button","href","target","circularProgress","marginTop","width","textAlign","girdItem","padding","loadMore","loadMoreLoading","fab","bottom","right","connect","state","searching","search","searchResult","dispatch","handleLoadingMore","getState","newSearchStart","then","response","data","items","grow","total","handleClearAll","Grid","container","CircularProgress","index","Grow","in","timeout","md","sm","xs","onClick","Fab","appBar","background","logo","breakpoints","down","flex","MenuBar","AppBar","Toolbar","src","alt","searchInput","marginBottom","borderColor","palette","primary","main","handleSearchAction","text","useState","searchInputValue","setSearchInputValue","handleSearchIssues","TextField","label","value","onChange","event","onKeyPress","e","blur","InputProps","endAdornment","InputAdornment","IconButton","edge","Container","action","combineReducers","middlewares","thunkMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","undefined","applyMiddleware","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.df784049.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export enum SearchActionTypes {\n  START_SEARCHING = 'START_SEARCHING',\n  FINISH_SEARCHING = 'FINISH_SEARCHING',\n  SET_SEARCH_KEYWORD = 'SET_SEARCH_KEYWORD',\n  SET_SEARCH_START = 'SET_SEARCH_START',\n  SET_SEARCH_MESSAGE = 'SET_SEARCH_MESSAGE',\n  GET_SEARCH_RESULT = 'GET_SEARCH_RESULT',\n  RESET_SEARCH_RESULT = 'RESET_SEARCH_RESULT'\n}\n\nexport interface SearchJiraIssuesItem {\n  link: string\n  title: string\n  highlight: string[]\n  grow?: boolean\n}\n\nexport interface SearchJiraIssuesResult {\n  total: number\n  items: SearchJiraIssuesItem[]\n}\n\nexport interface SearchAction {\n  type: string\n  searchKeyword?: string\n  searchStart?: number\n  searchMessage?: string\n  result?: SearchJiraIssuesResult\n}\n\nexport interface SearchReducerState {\n  searching: boolean\n  searchKeyword: string\n  searchStart: number\n  searchResult: SearchJiraIssuesResult\n  searchMessage: string\n}\n","const config = {\n  ROOT_URL: 'http://172.16.4.61:9094'\n}\n\nexport default config\n","import config from './config'\nimport axios from 'axios'\n\nconst getJiraIssues = (\n  keyword: string,\n  from: number = 0,\n  size: number = 10\n) => {\n  return axios.get(\n    `${config.ROOT_URL}/search/issues?q=${keyword}&from=${from}&size=${size}`\n  )\n}\n\nexport { getJiraIssues }\n","import { SearchActionTypes, SearchJiraIssuesResult } from 'types/search'\n\nimport { Dispatch } from 'redux'\nimport { RootReducerState } from 'reducers'\nimport { getJiraIssues } from 'api'\n\nconst startSearching = {\n  type: SearchActionTypes.START_SEARCHING\n}\n\nconst finishSearching = {\n  type: SearchActionTypes.FINISH_SEARCHING\n}\n\nconst setSearchKeyword = (keyword: string) => ({\n  type: SearchActionTypes.SET_SEARCH_KEYWORD,\n  searchKeyword: keyword\n})\n\nconst setSearchStart = (start: number) => ({\n  type: SearchActionTypes.SET_SEARCH_START,\n  searchStart: start\n})\n\nconst resetSearchResult = {\n  type: SearchActionTypes.RESET_SEARCH_RESULT\n}\n\nconst getSearchJiraIssuesResult = (result: SearchJiraIssuesResult) => ({\n  type: SearchActionTypes.GET_SEARCH_RESULT,\n  result\n})\n\nconst setSearchMessage = (message: string) => ({\n  type: SearchActionTypes.SET_SEARCH_MESSAGE,\n  searchMessage: message\n})\n\nfunction getJiraIssuesAction(keyword: string) {\n  return (dispatch: Dispatch) => {\n    dispatch(resetSearchResult)\n    dispatch(setSearchKeyword(keyword))\n    dispatch(setSearchStart(0))\n    dispatch(setSearchMessage(''))\n    dispatch(startSearching)\n\n    getJiraIssues(keyword).then(response => {\n      const data: SearchJiraIssuesResult = response.data\n\n      if (data.total !== 0) {\n        data.items.map(item => (item.grow = true))\n\n        dispatch(getSearchJiraIssuesResult(data))\n      } else {\n        dispatch(setSearchMessage('无搜索结果'))\n      }\n      dispatch(finishSearching)\n    })\n  }\n}\n\nfunction getExtarJiraIssuesAction() {\n  return (dispatch: Dispatch, getState: () => RootReducerState) => {\n    const { searchKeyword, searchStart, searchResult } = getState().search\n    const newSearchStart = searchStart + 10\n\n    dispatch(startSearching)\n\n    getJiraIssues(searchKeyword, newSearchStart).then(response => {\n      const data: SearchJiraIssuesResult = response.data\n\n      if (data.items !== null) {\n        searchResult.items.map(item => (item.grow = false))\n        data.items.map(item => (item.grow = true))\n\n        dispatch(\n          getSearchJiraIssuesResult({\n            total: data.total,\n            items: [...searchResult.items, ...data.items]\n          })\n        )\n        dispatch(setSearchStart(newSearchStart))\n      }\n\n      dispatch(finishSearching)\n    })\n  }\n}\n\nfunction clearAllSearchRelated() {\n  return (dispatch: Dispatch) => {\n    dispatch(resetSearchResult)\n    dispatch(setSearchKeyword(''))\n    dispatch(setSearchStart(0))\n    dispatch(setSearchMessage(''))\n  }\n}\n\nexport { getJiraIssuesAction, getExtarJiraIssuesAction, clearAllSearchRelated }\n","import { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\n\nimport Button from '@material-ui/core/Button'\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport React from 'react'\nimport Red from '@material-ui/core/colors/red'\nimport { SearchJiraIssuesItem } from 'types/search'\nimport Typography from '@material-ui/core/Typography'\n\nconst EM_REGEX = /<em>.*?<\\/em>/g\nconst EM_REGEX1 = /<em>/g\nconst EM_REGEX2 = /<\\/em>/g\n\nfunction getKeywords(highlight: string[]) {\n  return highlight\n    .map(item => item.match(EM_REGEX))\n    .filter(item => item !== null)\n    .map(item =>\n      item!.map(i => i.replace(EM_REGEX1, '').replace(EM_REGEX2, ''))\n    )\n    .flat()\n    .filter((v, i, a) => a.indexOf(v) === i)\n    .join('，')\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    card: {\n      position: 'relative',\n      height: '100%'\n    },\n    keywords: {\n      paddingTop: theme.spacing(1)\n    },\n    highlight: {\n      '& p': {\n        margin: `0 ${theme.spacing(1)}`\n      }\n    },\n    matchLines: {\n      '& strong': {\n        color: Red[700]\n      }\n    },\n    link: {\n      color: 'inherit',\n      textDecoration: 'none'\n    }\n  })\n)\n\ninterface IssueCardProps {\n  issue: SearchJiraIssuesItem\n}\n\nexport default function IssueCard(props: IssueCardProps) {\n  const classes = useStyles()\n  const { issue } = props\n\n  return (\n    <Card className={classes.card}>\n      <CardContent>\n        <Typography variant=\"h5\">{issue.title}</Typography>\n        <Typography color=\"textSecondary\" className={classes.keywords}>\n          关键词：{getKeywords(issue.highlight)}\n        </Typography>\n      </CardContent>\n      <CardContent className={classes.highlight}>\n        <Typography color=\"textSecondary\">匹配处：</Typography>\n        {issue.highlight.length > 0 &&\n          issue.highlight\n            .filter((v, i, a) => a.indexOf(v) === i)\n            .map(i =>\n              i.replace(EM_REGEX1, '<strong>').replace(EM_REGEX2, '</strong>')\n            )\n            .map((h, i) => (\n              <p\n                key={h[0] + i}\n                className={classes.matchLines}\n                dangerouslySetInnerHTML={{ __html: h }}\n              />\n            ))}\n      </CardContent>\n      <CardActions>\n        <Button color=\"primary\">\n          <a href={issue.link} target=\"blank\" className={classes.link}>\n            打开 Jira 链接\n          </a>\n        </Button>\n      </CardActions>\n    </Card>\n  )\n}\n","import { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\nimport { clearAllSearchRelated, getExtarJiraIssuesAction } from 'actions/search'\n\nimport Button from '@material-ui/core/Button'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport ClearIcon from '@material-ui/icons/Clear'\nimport { Dispatch } from 'redux'\nimport Fab from '@material-ui/core/Fab'\nimport Grid from '@material-ui/core/Grid'\nimport Grow from '@material-ui/core/Grow'\nimport IssueCard from 'components/IssueCard'\nimport React from 'react'\nimport { RootReducerState } from 'reducers'\nimport { SearchJiraIssuesResult } from 'types/search'\nimport Typography from '@material-ui/core/Typography'\nimport { connect } from 'react-redux'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    circularProgress: {\n      margin: '0 auto',\n      marginTop: '3rem'\n    },\n    searchMessage: {\n      width: '100%',\n      marginTop: '3rem',\n      textAlign: 'center'\n    },\n    girdItem: {\n      padding: theme.spacing(1)\n    },\n    loadMore: {\n      margin: '2rem 0',\n      textAlign: 'center'\n    },\n    loadMoreLoading: {\n      color: '#fff'\n    },\n    fab: {\n      position: 'fixed',\n      bottom: theme.spacing(2),\n      right: theme.spacing(2)\n    }\n  })\n)\n\ninterface IssuesListStateProps {\n  searching: boolean\n  searchMessage: string\n  searchResult: SearchJiraIssuesResult\n}\n\ninterface IssuesListDispatchProps {\n  handleLoadingMore: () => void\n  handleClearAll: () => void\n}\n\ntype IssuesListProps = IssuesListStateProps & IssuesListDispatchProps\n\nfunction IssuesList(props: IssuesListProps) {\n  const classes = useStyles()\n  const {\n    searching,\n    searchMessage,\n    searchResult,\n    handleLoadingMore,\n    handleClearAll\n  } = props\n\n  return (\n    <div className=\"Jira-Issue-Search-IssuesList\">\n      <Grid container>\n        {searching && searchResult.items.length === 0 && (\n          <CircularProgress className={classes.circularProgress} />\n        )}\n        {searchMessage && (\n          <div className={classes.searchMessage}>\n            <Typography variant=\"h6\">{searchMessage}</Typography>\n          </div>\n        )}\n        {searchResult.items.length > 0 &&\n          searchResult.items.map((item, index) =>\n            item.grow! ? (\n              <Grow\n                key={item.title + index}\n                in={true}\n                timeout={(index % 10) * 500}\n              >\n                <Grid item md={4} sm={12} xs={12} className={classes.girdItem}>\n                  <IssueCard issue={item}></IssueCard>\n                </Grid>\n              </Grow>\n            ) : (\n              <Grid\n                key={item.title + index}\n                item\n                md={4}\n                sm={12}\n                xs={12}\n                className={classes.girdItem}\n              >\n                <IssueCard issue={item}></IssueCard>\n              </Grid>\n            )\n          )}\n      </Grid>\n      {searchResult.items.length > 0 && (\n        <div className={classes.loadMore}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleLoadingMore}\n          >\n            {searching ? (\n              <CircularProgress size={24} className={classes.loadMoreLoading} />\n            ) : (\n              '加载更多'\n            )}\n          </Button>\n        </div>\n      )}\n      {searchResult.items.length > 0 && (\n        <Fab color=\"primary\" className={classes.fab} onClick={handleClearAll}>\n          <ClearIcon />\n        </Fab>\n      )}\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: RootReducerState) => ({\n  searching: state.search.searching,\n  searchMessage: state.search.searchMessage,\n  searchResult: state.search.searchResult\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  handleLoadingMore: () => dispatch(getExtarJiraIssuesAction() as any),\n  handleClearAll: () => dispatch(clearAllSearchRelated() as any)\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(IssuesList)\n","import './index.scss'\n\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\n\nimport AppBar from '@material-ui/core/AppBar'\nimport React from 'react'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    appBar: {\n      background: '#0747A6'\n    },\n    logo: {\n      position: 'absolute',\n      width: '100px',\n      [theme.breakpoints.down('sm')]: {\n        position: 'relative'\n      }\n    },\n    title: {\n      flex: 1,\n      textAlign: 'center'\n    }\n  })\n)\n\nexport default function MenuBar() {\n  const classes = useStyles()\n\n  return (\n    <nav className=\"Jira-Issue-Search-MenuBar\">\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <img\n            src=\"pingcap-logo.png\"\n            alt=\"pingcap-logo\"\n            className={classes.logo}\n          />\n          <Typography variant=\"h5\" className={classes.title}>\n            Jira Issue Search\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </nav>\n  )\n}\n","import React, { useState } from 'react'\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\n\nimport { Dispatch } from 'redux'\nimport IconButton from '@material-ui/core/IconButton'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport SearchIcon from '@material-ui/icons/Search'\nimport TextField from '@material-ui/core/TextField'\nimport { connect } from 'react-redux'\nimport { getJiraIssuesAction } from 'actions/search'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    searchInput: {\n      width: '100%',\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n      '& .MuiOutlinedInput-root': {\n        '&:hover fieldset': {\n          borderColor: theme.palette.primary.main\n        }\n      }\n    }\n  })\n)\n\ninterface SearchInputDispatchProps {\n  handleSearchAction: (text: string) => void\n}\n\nfunction SearchInput(props: SearchInputDispatchProps) {\n  const classes = useStyles()\n  const [searchInputValue, setSearchInputValue] = useState('')\n\n  const handleSearchIssues = () => {\n    if (searchInputValue === '') {\n      return\n    }\n\n    props.handleSearchAction(searchInputValue)\n  }\n\n  const handleSearchInputChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => setSearchInputValue(event.target.value)\n\n  const handleSearchInputKeyPress = (\n    e: React.KeyboardEvent<HTMLInputElement>\n  ) => {\n    if (e.key === 'Enter') {\n      handleSearchIssues()\n\n      const target = e.target as HTMLInputElement\n      target.blur()\n    }\n  }\n\n  return (\n    <div className=\"Jira-Issue-Search-SearchInput\">\n      <TextField\n        type=\"search\"\n        label=\"搜索 issues\"\n        className={classes.searchInput}\n        variant=\"outlined\"\n        value={searchInputValue}\n        onChange={handleSearchInputChange}\n        onKeyPress={handleSearchInputKeyPress}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <IconButton edge=\"end\" onClick={handleSearchIssues}>\n                <SearchIcon\n                  color={searchInputValue === '' ? 'default' : 'primary'}\n                />\n              </IconButton>\n            </InputAdornment>\n          )\n        }}\n      />\n    </div>\n  )\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  handleSearchAction: (text: string) =>\n    dispatch(getJiraIssuesAction(text) as any)\n})\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(SearchInput)\n","import IssuesList from 'components/IssuesList'\nimport MUIContainer from '@material-ui/core/Container'\nimport MenuBar from 'components/MenuBar'\nimport React from 'react'\nimport SearchInput from 'components/SearchInput'\n\nexport default function Container() {\n  return (\n    <div className=\"Jira-Issue-Search-Container\">\n      <MenuBar />\n      <MUIContainer>\n        <SearchInput />\n        <IssuesList />\n      </MUIContainer>\n    </div>\n  )\n}\n","import { Reducer } from 'redux'\n\nimport {\n  SearchActionTypes,\n  SearchReducerState,\n  SearchAction\n} from 'types/search'\n\nconst search: Reducer<SearchReducerState, SearchAction> = (\n  state = {\n    searching: false,\n    searchKeyword: '',\n    searchStart: 0,\n    searchMessage: '',\n    searchResult: {\n      total: 0,\n      items: []\n    }\n  },\n  action\n) => {\n  switch (action.type) {\n    case SearchActionTypes.START_SEARCHING:\n      return { ...state, searching: true }\n    case SearchActionTypes.FINISH_SEARCHING:\n      return { ...state, searching: false }\n    case SearchActionTypes.SET_SEARCH_KEYWORD:\n      return { ...state, searchKeyword: action.searchKeyword! }\n    case SearchActionTypes.SET_SEARCH_START:\n      return { ...state, searchStart: action.searchStart! }\n    case SearchActionTypes.SET_SEARCH_MESSAGE:\n      return { ...state, searchMessage: action.searchMessage! }\n    case SearchActionTypes.GET_SEARCH_RESULT:\n      return { ...state, searchResult: action.result! }\n    case SearchActionTypes.RESET_SEARCH_RESULT:\n      return { ...state, searchResult: { total: 0, items: [] } }\n    default:\n      return state\n  }\n}\n\nexport default search\n","import { SearchReducerState } from 'types/search'\nimport { combineReducers } from 'redux'\nimport search from './search'\n\nexport interface RootReducerState {\n  search: SearchReducerState\n}\n\nexport default combineReducers({\n  search\n})\n","import { Middleware, applyMiddleware, compose, createStore } from 'redux'\n\nimport rootReducer from 'reducers'\nimport thunkMiddleware from 'redux-thunk'\n\nconst middlewares: Middleware[] = [thunkMiddleware]\n\nconst composeEnhancers =\n  (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nexport default () => {\n  const store = createStore(\n    rootReducer,\n    undefined,\n    composeEnhancers(applyMiddleware(...middlewares))\n  )\n\n  return store\n}\n","import Container from 'components/Container'\nimport { Provider } from 'react-redux'\nimport React from 'react'\nimport configureStore from './store'\n\nconst store = configureStore()\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"Jira-Issue-Search-App\">\n      <Provider store={store}>\n        <Container />\n      </Provider>\n    </div>\n  )\n}\n\nexport default App\n","import * as serviceWorker from './serviceWorker'\n\nimport App from './App'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}